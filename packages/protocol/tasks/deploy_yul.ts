const hre = require("hardhat");
const fs = require("fs");
const { spawn, spawnSync } = require("node:child_process");

async function compilePlonkVerifier(callback: any) {
    const SOLC_COMMAND = "./bin/solc-static-linux";

    // download solc if not exist.
    if (!fs.existsSync(SOLC_COMMAND)) {
        console.log("downloading solc ...");
        spawnSync("tasks/download_solc.sh");
        console.log("download finished.");
    }

    const sourceFile = "contracts/test/yul/PlonkVerifier.yulp";

    const compile = spawn(SOLC_COMMAND, ["--yul", "--bin", sourceFile]);

    let output = "";
    compile.stdout.on("data", (data: any) => {
        output += data.toString();
    });

    compile.on("exit", async (code: any) => {
        const lines = output.split("\n");
        const tag = "Binary representation:";
        let next = false;
        for (const line of lines) {
            if (next) {
                return await callback(line);
            }

            if (line === tag) {
                next = true;
            }
        }
    });
}

async function testVerifier(verifierAddr: string) {
    const calldata =
        "0x2a40ab5e5b856203c9122649058a97567222a62afcb801eb8b9f6604c496c669189fc0213dab03b705f04140b099bc25af76c2e3fb23d1f0402856a4f709e23a00000000000000000000000000000000000000000000000000000000000005390000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000029d5df054bc68e510988253b6c4718f165be7e7b98692f103902a729238242920b17509e943ce79ce0d1de8bf65bff3e466a0885cdd180bfa101bd606345be971b4f4278e27c62a59ab4b8da3d0d5358aecbae5d2c8f9c81c770843d28b6ddbb1c3607c3c33b3e16513b50364ca0124de68955e25657a7dad55cdc2f8ba7f9ab0a608b48e0f7c967e3565ad9f4dfc22f037cffcb812c375cef8a95d09b2611c32609869026c1e4abe0af0a837470a743b485d6c25fd9bd5fe1548169b8fee9c92ae72ef3c26d390ad4ba2f883cad1ed28d04d82a04c82ce06df57755ba749a1a2a71324cda34e111d92c9f0d6d9fcc9671e3259c511e7e184bf48ddd3d153908003ff5f707ad84b986b79dfec5c87e3dfa1820e06c31aca4402a9e0ac1228f2c017d0d1f9c3c155840a05881dedd8499e4a1b7ed4d334edfbbfc13ed11cb82ec2c1e60ac1ad742259b092a924f38aa20f296684163e987dfac5c03703e8d1ff816540e47d2850a2bdc32a663ae54c2abc2145764dbbb7d9af571cd00608f8e760756d694777efebd36f414afb208ec769e959ae4ac120b11b87e996afcf0e1be159cbc66f87aaa5f7e6c0e1cc092c3a388d273488dc023331d01aab2e7b209240a30f0b894b6ed30f7e37a5c1a6758eb1ed5dafbc9a9353dc3db3491f89fcf0f0cb03599351cd22cf79ee7d3094f01aa7fd909fd654530da4e2ef2031fe885d3180a3201ded2811aa05ba08fb1a06e14ef89d7ad77bcc476b64f56850741816c0fb94bd411d53a449b475adec1a487ae6adf6d5ecae8c0d27d600fc8ee20e55801300dd1cb8676ad83d0838531dbcfc74317983741fd6ead4f9587c0b80d915000847d5fdedeea912b4a4844cd0b4ab62fa49769e1b1e2d41d2ee28fdcfeee800728ba6aba10c5c7e5086eebd51716fad15b18a60761c86f3b8ad3793f7fde3106630e59c9cf22e75599a87e3c57ecf284dad06b988addaab14cd215ff29f30027f1384bd084007f16e6872c0eed63fc8aee2bf78ef5874f84a19908bc09dc07262b48290124029694312239cc263f645d235621f6a0657bdc5bd0b0faa595d30885be0a9c32092a5e3ed82073ab74c6702d034a6ce5241d363145a8625bbbd1131ad22ea20971bd120860ce6a9143eee4cd74f9c61b813851df0c49c558528d1f45e8ffd818df5f5155e2a29d07e8927872e4e0840cf9283fd41ba14216f7db2d5d8efd2eea79d766feee97ad786ed8d0ca29dc2d7c5aa81640a082677dcbab0f27d279766b7c5488c4615a0ff6a45027b0c92657f5f5aa730ad916e90c53bc2cd7b798deb277533716145652a52c61d240bd78aacc6443cf524bf195eb06f52adb1b37ed2826850d6e29694e6dd37b40537304f2443f21f218c1c6461904911314c2f4da3a58d61d42a91ea5f708840e8e3db54b0f1b9f371a4b65e2aa309d1a22438b7c70b02e487d604194bf2c754c3581d920e849334be07056b8a73e15286a83f5a0c7820fab2204240aae731f27f5b0961a86e5d4481e12ba414c88861b29a9435b3e00609881381d31e864e2cff12681f143e09d0d0c5895c9e90e050d5b03f3d0f3b221e7b8ae211d722b17891c3f1f232a0a3ba1729dbbf01f47cd2738d7f34fd196b88684027ed805605c547f1d7e6a54deb7ed34d55fc69346071e04bae0571ecdbe63b410cea74bf69d2ef4a21f4d7b71978f23d62875b6f0452191d8219d88609bc0a214d671c4b7f50a18e64e9c11955f6d99de1af23de36b2446b2bd3681276c2711035fa3ef80987ca8512c75967ca892481e7e3a6b530514dcf33919db989cd988fb85d8625588a54b45ea31c76a101fb1e7751c4da7f302255ec11a4dfb713bd3c38c8bd44dad0398d12c1ff5c0d967a5100e494b028f1a5e529d27021ffcc7070f688b90021cf74da87662e422b59097e3fd9ae5a0f9175a02edfdc6a9a2863505d4ab0af87f6266fe21a7c1ddca6c0b63f84f24b0cc2031f526bb1bc12d6bb024ef0e52127f888d396e22cb99371ff4f2b8868309e62e2b5cd0d6714b1b14ad22e93a9f77597d114058b3c84b3e83564ca0809b4e551d206d627dadb1928ccc463cd1736b6717cf0a882646eb3e7dc48ac991b9e88b216d3a0c4c0e34a6c2e3a4be5aa9e26772db3f2757d26b6c3c142d2d6bd5555a196cd924c22e8fc013eb7b000c93f0551929e40552f7838fafe17ddfa83639e925d7fdef0f8d2d28c50e2951ef902055a3ddb59861b4ba4dd96dfc50252706c21839ed7ae76270e3b53f31b95bded30e180c849858472d8d1919bc156839522e289cf53e97e341cc347b430644af46989cc9e9ba9469a36321ca8817af6417f31484377456922debf863ea610ca846892275e6afa0e43c6df599e81bdc2f448328a5a939fae76e0aa7b997094cf65d40921681c44b84b5333ccff9f2ca4ffad728abaa27a0ac9d46bc9def73f0ddc000a8c9974dfd552e5be60fe524eeecf6731d962cd7199d3f18ee72e9616876feb58de82f93a5fe150c572185da0b5d112c07009e7e2290117efe55d57c7016842a557951d3b1a6b0928a7e9a0756b8f9132d73e5b40efb13cb1e43c168894848dd79909dc1a5088f9c09b358d1b4fe2e7c012208c7fc62300b5d0687315dc037e72d559b380abef6b7cb987f915c5a1f7306a65ae2a7d9a0e8df77b72a8bae3d2e9d16037e4f6392ae19d58b3edcfa9f81026828457e0690561d3582966006b9f4fdc6121baa75426d7300b5b93f74258b1e3903b0bce0201d67efd761b95d884ded0ffda7b987bf09ac27b02acf6b96881c973883813d7007b758cb193f10709c20bc411847b23741b536a340e51879141ed4172e236c3ba0e830124d8b5cdcc2847db2ed7e9174eb2c8869a73610c9f208da7d3238fc9ea35df64f6f561f8ef29d8a69bd505843274323ff7f8a8564492f842878b146ad848af49e17f949d61e93c039a565f737e834e471fa2964b7bd04c7429d450f6f641d0d9970aa2cb071eda5849ff89bab621a547d01d7d3fa2c299e66284e92cc98a683f8b3f1fc372becb90adc4b886d213d9305fb6999389827324ce95cce46ac0785d7c3e07409151027cdc9667a06ed07fe9568a4f947b31f8df550cb3528e051ed42eafcb4fc43d7e5681fe5eab8231377cff479e5eed70bf431baed5113def5f9686c92407ef876dd9c4792544b6d8e0c820036509c670631e18fb668b566a2319b839dcdc2b794e420d9f798073dc8a64c3c5182e57c0b18e62f1b17a78867a8aaf64e0203982f41664112cc995b3e043f2b75747eba1feac988ed6d370f69522381a37bb13726e9b6964bdd616569c864ad76480578010ac9ce2d83bb48f79d948eab16f59cb48535aa9353301294b775317c414a2606ae1932b3ab9d979a650a8f0c0072f8fc39c59f21a6505c493e718da1fd556f2abfbbdc60f875a9f3650e53869374b04e7626c88ac7f4be002d37e3af71fabc109a6c5f7db4746dfe386045ef737ed7e60b1d4cc9cd373e338a4827a064f1240c555e9ebf860fa2aa65a4167996382e1f01316360f247e66bf7f0a3ee67e67e2e9aeab50a3c589259e419d18865ad0235f27931ed4d95faa70980c5dfbcf876099dc6ef8666173d6e748d5f0843fa965c3e8022c8f91b9d66c90390130d67762254976b6d1cf5c3fe420049144ed0df9d0b72dfe5b355f97128aef28b6e5168144b7e62d5c4ccc828991ae206c5a0251a97c17214870fe9fbad18881b1a67130ea255ef0043c4aeccd1321c32faa773c40b64902618c8961baccdd15603f03e1ba97d559921324d36f876b69983af2e15bb792d6e66b360e670f036962d4a4601c3c0f475990bce646c35b11214e4c99e64638cc90d908dfe42090aa6ec786f2c199a812df8d6776b08acb886aea28dbf153a2cc77c284b5eb9e44341dbd3d000779ddaec5fcb2aa2f1cbb345eabdebaa0da215e8173facdfbb85e014c1611d11f1e9111843843aeef4079d9ab091877f272b1a2624375da014d972e094e8511ce357ebf794583c8b575f45c1436aba9d6359070727ee70482e02640bd9e4392c3e0af989f52cea43b646fb3d49e27730b9b3e832715a1f98b8e9b9d97a452c01973f303413bd02ebde4d9ad9b7764a9a88cc51c12112823cd8b73daf0524ea0509d2137b2af11b4cb6be6d3f79495b5cc0ee61c9ffd8c13f35a6805a9a43bd0d6be360c6139276b0fa1cd820b61c5f3aa1ff0109349ad5222dbc9c1fe66b8f03f9cee2bd77f5877f8ac6bdc8810b975f2a1ad4d5bb1dbe1b88395dc8a7742323bc68f67d2cee7c8e182806e003c2a9abf4c45cd98cfb84efc997bc937e854b2fb0261810bbf0ce2471391de695ff85d90b4941b2def62b09f32684743d411519cfed67a89ef3f2a53c048e6e673071dc0c70212149ff78b9bed459b168322d016a55c7009338b274f8ae5195d5e128cfd3e5cce1c5a23460ab67481d7393510bf9c31f31f149f146e7413ba82b1a8afd1513cb2e860f2802101e9eee1815d016d0506cf8ee596a549aca1de254c8ba3ec6490d5778c56c25059fcda0e2542d1db27e792f91f863b0fbe4df05cbb96e8212c35c05b0075c65413dea97e7d29c18dd047716ed3dcbe8cbcd4baa592cdb2e18ac9d6bd8a67db0ef886a468d001618fdd31519911ec367dea13f697a7e028f379f56521ce3160c3b13cca1d1dfb6172946d013db0fb37ff89465198cba5241ccd86eff758770c78ab0e8f3a94b2d1f1339aa1faee8dc49ff2cc469fbdecf86015a4309d32345b0b2b134794f1da007d6b41e207e32f473f6753753b6146b90409ef777c3b12bbce2c18ade783aa60fd0734ca9b50c5cb4d9de18d53ca2c7a1ef13e4c259dfc1f1075a4f32136a9113dcc5fa9cc39b96d8d93ffdf5886029e436fac3a4eed9d27a718613a093745819b9480289d3c843ea46276ef9424708968c5b6845b76af4b05d0a2101c5a0861ecb9f12bc74df95650476bb20c80e940972b8d1be5d3cd9b9ff6036dc80112b038a8197e52749bef2d9daf9222f1e4fcb1f32da1c6dd7cc9f4e5966277c2eb6241088091d04e3eda6821dc5c17d7dca46fdbf138ca6fe5a8b71bf38f251968b150b2fb52a8ecc90f69cb4a5d350a49148b2a20fcb96a46dddcc8146481aa8502c37f8c6e5617b84f6658fc59df86272bb76054794dc485d1f4e98c90f3511b413f56fe3f360e0244c2ef9b83808a84872f1f2188c9e5d3c1c5dd0b1381bb7b101efe06817dcc9fb851a3e33148633cff88adf9cd7b3e18850e70d4e431273d304329ccc39e6fc29f246235714fbb5f26955f9fd6d49bf5da88d7ae2e0317bf52f971942d48d15faf1a23a38ac0937cc8b35ed401a0743f9cfe85ba8339029c9";

    // const [signer] = await hre.ethers.getSigners();
    // const tx =  await signer.sendTransaction({
    //     to: verifierAddr,
    //     data: calldata,
    //     gasLimit: 15000000,
    // })

    // console.log("tx: ", tx)
    // const receipt = await tx.wait()
    // console.log("receipt:", receipt)

    const testVerifier = await (
        await hre.ethers.getContractFactory("TestVerifier")
    ).deploy();
    // console.log(testVerifier)

    const tx = await testVerifier.verifyZKP(verifierAddr, calldata);
    //     console.log("res:", res);
    console.log("tx:", tx);
    // const receipt = await tx.wait()
    // console.log("receipt:", receipt)
}

async function main() {
    const [signer] = await hre.ethers.getSigners();
    console.log("signer addr:", signer.address);

    compilePlonkVerifier(async function (bin: string) {
        // console.log("bin:", bin)
        const tx = await signer.sendTransaction({
            data: "0x" + bin,
        });

        // console.log(tx)
        const receipt = await tx.wait();
        // console.log("receipt:", receipt)
        const plonkVerifierAddr = receipt.contractAddress;
        console.log("PlonkVerifierAddr: ", plonkVerifierAddr);

        await testVerifier(plonkVerifierAddr);
    });
}

main();
